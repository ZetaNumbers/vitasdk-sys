/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;

pub mod SceCtrlErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_ERROR_INVALID_ARG: Type = 2150891521;
    pub const SCE_CTRL_ERROR_PRIV_REQUIRED: Type = 2150891522;
    pub const SCE_CTRL_ERROR_NO_DEVICE: Type = 2150891552;
    pub const SCE_CTRL_ERROR_NOT_SUPPORTED: Type = 2150891553;
    pub const SCE_CTRL_ERROR_INVALID_MODE: Type = 2150891554;
    pub const SCE_CTRL_ERROR_FATAL: Type = 2150891775;
}
pub mod SceCtrlButtons {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_SELECT: Type = 1;
    pub const SCE_CTRL_L3: Type = 2;
    pub const SCE_CTRL_R3: Type = 4;
    pub const SCE_CTRL_START: Type = 8;
    pub const SCE_CTRL_UP: Type = 16;
    pub const SCE_CTRL_RIGHT: Type = 32;
    pub const SCE_CTRL_DOWN: Type = 64;
    pub const SCE_CTRL_LEFT: Type = 128;
    pub const SCE_CTRL_LTRIGGER: Type = 256;
    pub const SCE_CTRL_L2: Type = 256;
    pub const SCE_CTRL_RTRIGGER: Type = 512;
    pub const SCE_CTRL_R2: Type = 512;
    pub const SCE_CTRL_L1: Type = 1024;
    pub const SCE_CTRL_R1: Type = 2048;
    pub const SCE_CTRL_TRIANGLE: Type = 4096;
    pub const SCE_CTRL_CIRCLE: Type = 8192;
    pub const SCE_CTRL_CROSS: Type = 16384;
    pub const SCE_CTRL_SQUARE: Type = 32768;
    pub const SCE_CTRL_INTERCEPTED: Type = 65536;
    pub const SCE_CTRL_PSBUTTON: Type = 65536;
    pub const SCE_CTRL_HEADPHONE: Type = 524288;
    pub const SCE_CTRL_VOLUP: Type = 1048576;
    pub const SCE_CTRL_VOLDOWN: Type = 2097152;
    pub const SCE_CTRL_POWER: Type = 1073741824;
}
pub mod SceCtrlExternalInputMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_TYPE_UNPAIRED: Type = 0;
    pub const SCE_CTRL_TYPE_PHY: Type = 1;
    pub const SCE_CTRL_TYPE_VIRT: Type = 2;
    pub const SCE_CTRL_TYPE_DS3: Type = 4;
    pub const SCE_CTRL_TYPE_DS4: Type = 8;
}
pub mod SceCtrlPadInputMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_MODE_DIGITAL: Type = 0;
    pub const SCE_CTRL_MODE_ANALOG: Type = 1;
    pub const SCE_CTRL_MODE_ANALOG_WIDE: Type = 2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlData {
    pub timeStamp: u64,
    pub buttons: crate::ctypes::c_uint,
    pub lx: crate::ctypes::c_uchar,
    pub ly: crate::ctypes::c_uchar,
    pub rx: crate::ctypes::c_uchar,
    pub ry: crate::ctypes::c_uchar,
    pub up: u8,
    pub right: u8,
    pub down: u8,
    pub left: u8,
    pub lt: u8,
    pub rt: u8,
    pub l1: u8,
    pub r1: u8,
    pub triangle: u8,
    pub circle: u8,
    pub cross: u8,
    pub square: u8,
    pub reserved: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlRapidFireRule {
    pub Mask: crate::ctypes::c_uint,
    pub Trigger: crate::ctypes::c_uint,
    pub Target: crate::ctypes::c_uint,
    pub Delay: crate::ctypes::c_uint,
    pub Make: crate::ctypes::c_uint,
    pub Break: crate::ctypes::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlActuator {
    pub small: crate::ctypes::c_uchar,
    pub large: crate::ctypes::c_uchar,
    pub unk: [u8; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlPortInfo {
    pub port: [u8; 5usize],
    pub unk: [u8; 11usize],
}
extern "C" {
    pub fn sceCtrlSetSamplingMode(mode: SceCtrlPadInputMode::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetSamplingModeExt(mode: SceCtrlPadInputMode::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetSamplingMode(pMode: *mut SceCtrlPadInputMode::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositive2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositiveExt(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferPositiveExt2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlPeekBufferNegative2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositive2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositiveExt(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferPositiveExt2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlReadBufferNegative2(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
        pRule: *const SceCtrlRapidFireRule,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlClearRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetActuator(
        port: crate::ctypes::c_int,
        pState: *const SceCtrlActuator,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetLightBar(
        port: crate::ctypes::c_int,
        r: SceUInt8,
        g: SceUInt8,
        b: SceUInt8,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetControllerPortInfo(info: *mut SceCtrlPortInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetBatteryInfo(
        port: crate::ctypes::c_int,
        batt: *mut SceUInt8,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlSetButtonIntercept(intercept: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlGetButtonIntercept(intercept: *mut crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceCtrlIsMultiControllerSupported() -> crate::ctypes::c_int;
}
