/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2common::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;

pub mod ScePowerCallbackType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_POWER_CB_POWER_SWITCH: Type = 2147483648;
    pub const SCE_POWER_CB_UNK_1: Type = 6291456;
    pub const SCE_POWER_CB_UNK_2: Type = 4194304;
    pub const SCE_POWER_CB_RESUME_COMPLETE: Type = 262144;
    pub const SCE_POWER_CB_RESUMING: Type = 131072;
    pub const SCE_POWER_CB_SUSPENDING: Type = 65536;
    pub const SCE_POWER_CB_AC_POWER: Type = 4096;
    pub const SCE_POWER_CB_LOWBATTERY: Type = 256;
    pub const SCE_POWER_CB_BATTERY_EXIST: Type = 128;
}
pub type ScePowerCallback = ::core::option::Option<
    unsafe extern "C" fn(
        notifyId: crate::ctypes::c_int,
        notifyCount: crate::ctypes::c_int,
        powerInfo: crate::ctypes::c_int,
    ),
>;
extern "C" {
    pub fn kscePowerRegisterCallback(cbid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerUnregisterCallback(cbid: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerIsBatteryCharging() -> SceBool;
}
extern "C" {
    pub fn kscePowerGetBatteryLifePercent() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerIsSuspendRequired() -> SceBool;
}
extern "C" {
    pub fn kscePowerIsPowerOnline() -> SceBool;
}
extern "C" {
    pub fn kscePowerGetBatteryLifeTime() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetBatteryRemainCapacity() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerIsLowBattery() -> SceBool;
}
extern "C" {
    pub fn kscePowerGetBatteryFullCapacity() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetBatteryTemp() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetBatteryVolt() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetBatterySOH() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetBatteryCycleCount() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetArmClockFrequency() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetBusClockFrequency() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetSysClockFrequency() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerGetGpuXbarClockFrequency() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerRequestSoftReset() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerRequestColdReset() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerRequestStandby() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerRequestSuspend() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerRequestDisplayOff() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerSetDisplayBrightness(brightness: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerSetArmClockFrequency(freq: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerSetBusClockFrequency(freq: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerSetGpuClockFrequency(freq: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn kscePowerSetGpuXbarClockFrequency(freq: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
