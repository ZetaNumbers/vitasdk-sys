/* automatically generated by rust-bindgen 0.58.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::iofilemgr::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;

#[repr(C)]
pub struct SceIoDevInfo {
    pub max_size: SceOff,
    pub free_size: SceOff,
    pub cluster_size: SceSize,
    pub unk: *mut crate::ctypes::c_void,
}
extern "C" {
    pub fn ksceIoDevctl(
        dev: *const crate::ctypes::c_char,
        cmd: crate::ctypes::c_uint,
        indata: *mut crate::ctypes::c_void,
        inlen: crate::ctypes::c_int,
        outdata: *mut crate::ctypes::c_void,
        outlen: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
pub mod SceIoAccessMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_S_IXUSR: Type = 1;
    pub const SCE_S_IWUSR: Type = 2;
    pub const SCE_S_IRUSR: Type = 4;
    pub const SCE_S_IRWXU: Type = 7;
    pub const SCE_S_IXGRP: Type = 8;
    pub const SCE_S_IWGRP: Type = 16;
    pub const SCE_S_IRGRP: Type = 32;
    pub const SCE_S_IRWXG: Type = 56;
    pub const SCE_S_IXOTH: Type = 64;
    pub const SCE_S_IWOTH: Type = 128;
    pub const SCE_S_IROTH: Type = 256;
    pub const SCE_S_IRWXO: Type = 448;
    pub const SCE_S_ISVTX: Type = 512;
    pub const SCE_S_ISGID: Type = 1024;
    pub const SCE_S_ISUID: Type = 2048;
    pub const SCE_S_IFDIR: Type = 4096;
    pub const SCE_S_IFREG: Type = 8192;
    pub const SCE_S_IFLNK: Type = 16384;
    pub const SCE_S_IFMT: Type = 61440;
}
pub mod SceIoFileMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_SO_IXOTH: Type = 1;
    pub const SCE_SO_IWOTH: Type = 2;
    pub const SCE_SO_IROTH: Type = 4;
    pub const SCE_SO_IFLNK: Type = 8;
    pub const SCE_SO_IFDIR: Type = 16;
    pub const SCE_SO_IFREG: Type = 32;
    pub const SCE_SO_IFMT: Type = 56;
}
#[repr(C)]
pub struct SceIoStat {
    pub st_mode: SceMode,
    pub st_attr: crate::ctypes::c_uint,
    pub st_size: SceOff,
    pub st_ctime: SceDateTime,
    pub st_atime: SceDateTime,
    pub st_mtime: SceDateTime,
    pub st_private: [crate::ctypes::c_uint; 6usize],
}
extern "C" {
    pub fn ksceIoMkdir(dir: *const crate::ctypes::c_char, mode: SceMode) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoRmdir(path: *const crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoGetstat(
        file: *const crate::ctypes::c_char,
        stat: *mut SceIoStat,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoGetstatByFd(fd: SceUID, stat: *mut SceIoStat) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoChstat(
        file: *const crate::ctypes::c_char,
        stat: *mut SceIoStat,
        bits: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoChstatByFd(
        fd: SceUID,
        stat: *mut SceIoStat,
        bits: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
pub struct SceIoDirent {
    pub d_stat: SceIoStat,
    pub d_name: [crate::ctypes::c_char; 256usize],
    pub d_private: *mut crate::ctypes::c_void,
    pub dummy: crate::ctypes::c_int,
}
extern "C" {
    pub fn ksceIoDopen(dirname: *const crate::ctypes::c_char) -> SceUID;
}
extern "C" {
    pub fn ksceIoDread(fd: SceUID, dir: *mut SceIoDirent) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoDclose(fd: SceUID) -> crate::ctypes::c_int;
}
#[repr(C)]
pub struct SceIoFdInfo {
    pub fd: SceUID,
    pub pid: SceUID,
}
extern "C" {
    pub fn ksceIoGetGUIDFdListForDebugger(
        vis_level: crate::ctypes::c_int,
        dst: *mut SceIoFdInfo,
        max_size: SceSize,
        res_size: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoGetPUIDFdListForDebugger(
        vis_level: crate::ctypes::c_int,
        dst: *mut SceIoFdInfo,
        max_size: SceSize,
        res_size: *mut SceSize,
    ) -> crate::ctypes::c_int;
}
#[repr(C)]
pub struct SceIofileInfo {
    pub path: [crate::ctypes::c_char; 1024usize],
    pub path2: [crate::ctypes::c_char; 1024usize],
    pub pid: SceUID,
    pub data_0x804: crate::ctypes::c_int,
    pub data_0x808: crate::ctypes::c_int,
    pub data_0x80C: crate::ctypes::c_int,
    pub data_0x810: crate::ctypes::c_int,
    pub data_0x814: crate::ctypes::c_int,
    pub data_0x818: crate::ctypes::c_int,
    pub data_0x81C: crate::ctypes::c_int,
    pub data_0x820: crate::ctypes::c_int,
    pub data_0x824: crate::ctypes::c_int,
}
extern "C" {
    pub fn ksceIoGetFileInfo(
        fd: SceUID,
        pid: SceUID,
        info: *mut SceIofileInfo,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoMount(
        id: crate::ctypes::c_int,
        path: *const crate::ctypes::c_char,
        permission: crate::ctypes::c_int,
        a4: crate::ctypes::c_int,
        a5: crate::ctypes::c_int,
        a6: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoUmount(
        id: crate::ctypes::c_int,
        a2: crate::ctypes::c_int,
        a3: crate::ctypes::c_int,
        a4: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoGetRemoteKPLSData(
        pid: SceUID,
        dst: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
pub mod SceIoMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_O_RDONLY: Type = 1;
    pub const SCE_O_WRONLY: Type = 2;
    pub const SCE_O_RDWR: Type = 3;
    pub const SCE_O_NBLOCK: Type = 4;
    pub const SCE_O_DIROPEN: Type = 8;
    pub const SCE_O_RDLOCK: Type = 16;
    pub const SCE_O_WRLOCK: Type = 32;
    pub const SCE_O_APPEND: Type = 256;
    pub const SCE_O_CREAT: Type = 512;
    pub const SCE_O_TRUNC: Type = 1024;
    pub const SCE_O_EXCL: Type = 2048;
    pub const SCE_O_SCAN: Type = 4096;
    pub const SCE_O_RCOM: Type = 8192;
    pub const SCE_O_NOBUF: Type = 16384;
    pub const SCE_O_NOWAIT: Type = 32768;
    pub const SCE_O_FDEXCL: Type = 16777216;
    pub const SCE_O_PWLOCK: Type = 33554432;
    pub const SCE_O_FGAMEDATA: Type = 1073741824;
}
pub mod SceIoSeekMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_SEEK_SET: Type = 0;
    pub const SCE_SEEK_CUR: Type = 1;
    pub const SCE_SEEK_END: Type = 2;
}
pub mod SceIoDevType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_DEV_TYPE_NULL: Type = 0;
    pub const SCE_DEV_TYPE_CHAR: Type = 1;
    pub const SCE_DEV_TYPE_BLOCK: Type = 4;
    pub const SCE_DEV_TYPE_FS: Type = 16;
    pub const SCE_DEV_TYPE_ALIAS: Type = 32;
    pub const SCE_DEV_TYPE_MOUNTPT: Type = 64;
}
extern "C" {
    pub fn ksceIoOpen(
        file: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
        mode: SceMode,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceIoOpenAsync(
        file: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
        mode: SceMode,
    ) -> SceUID;
}
extern "C" {
    pub fn ksceIoClose(fd: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoCloseAsync(fd: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoRead(
        fd: SceUID,
        data: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoReadAsync(
        fd: SceUID,
        data: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoPread(
        fd: SceUID,
        data: *mut crate::ctypes::c_void,
        size: SceSize,
        offset: SceOff,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoWrite(
        fd: SceUID,
        data: *const crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoWriteAsync(
        fd: SceUID,
        data: *const crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoPwrite(
        fd: SceUID,
        data: *const crate::ctypes::c_void,
        size: SceSize,
        offset: SceOff,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoLseek(fd: SceUID, offset: SceOff, whence: crate::ctypes::c_int) -> SceOff;
}
extern "C" {
    pub fn ksceIoLseekAsync(
        fd: SceUID,
        offset: SceOff,
        whence: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoRemove(file: *const crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoRename(
        oldname: *const crate::ctypes::c_char,
        newname: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoSync(
        device: *const crate::ctypes::c_char,
        unk: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoSyncByFd(fd: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceIoCancel(fd: SceUID) -> crate::ctypes::c_int;
}
