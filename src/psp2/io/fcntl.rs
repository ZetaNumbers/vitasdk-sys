/* automatically generated by rust-bindgen 0.58.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;

pub mod SceIoMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_O_RDONLY: Type = 1;
    pub const SCE_O_WRONLY: Type = 2;
    pub const SCE_O_RDWR: Type = 3;
    pub const SCE_O_NBLOCK: Type = 4;
    pub const SCE_O_DIROPEN: Type = 8;
    pub const SCE_O_RDLOCK: Type = 16;
    pub const SCE_O_WRLOCK: Type = 32;
    pub const SCE_O_APPEND: Type = 256;
    pub const SCE_O_CREAT: Type = 512;
    pub const SCE_O_TRUNC: Type = 1024;
    pub const SCE_O_EXCL: Type = 2048;
    pub const SCE_O_SCAN: Type = 4096;
    pub const SCE_O_RCOM: Type = 8192;
    pub const SCE_O_NOBUF: Type = 16384;
    pub const SCE_O_NOWAIT: Type = 32768;
    pub const SCE_O_FDEXCL: Type = 16777216;
    pub const SCE_O_PWLOCK: Type = 33554432;
    pub const SCE_O_FGAMEDATA: Type = 1073741824;
}
pub mod SceIoSeekMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_SEEK_SET: Type = 0;
    pub const SCE_SEEK_CUR: Type = 1;
    pub const SCE_SEEK_END: Type = 2;
}
pub mod SceIoDevType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_DEV_TYPE_NULL: Type = 0;
    pub const SCE_DEV_TYPE_CHAR: Type = 1;
    pub const SCE_DEV_TYPE_BLOCK: Type = 4;
    pub const SCE_DEV_TYPE_FS: Type = 16;
    pub const SCE_DEV_TYPE_ALIAS: Type = 32;
    pub const SCE_DEV_TYPE_MOUNTPT: Type = 64;
}
extern "C" {
    pub fn sceIoOpen(
        file: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
        mode: SceMode,
    ) -> SceUID;
}
extern "C" {
    pub fn sceIoOpenAsync(
        file: *const crate::ctypes::c_char,
        flags: crate::ctypes::c_int,
        mode: SceMode,
    ) -> SceUID;
}
extern "C" {
    pub fn sceIoClose(fd: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoCloseAsync(fd: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoRead(
        fd: SceUID,
        data: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoReadAsync(
        fd: SceUID,
        data: *mut crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoPread(
        fd: SceUID,
        data: *mut crate::ctypes::c_void,
        size: SceSize,
        offset: SceOff,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoWrite(
        fd: SceUID,
        data: *const crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoWriteAsync(
        fd: SceUID,
        data: *const crate::ctypes::c_void,
        size: SceSize,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoPwrite(
        fd: SceUID,
        data: *const crate::ctypes::c_void,
        size: SceSize,
        offset: SceOff,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoLseek(fd: SceUID, offset: SceOff, whence: crate::ctypes::c_int) -> SceOff;
}
extern "C" {
    pub fn sceIoLseekAsync(
        fd: SceUID,
        offset: SceOff,
        whence: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoLseek32(
        fd: SceUID,
        offset: crate::ctypes::c_int,
        whence: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoRemove(file: *const crate::ctypes::c_char) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoRename(
        oldname: *const crate::ctypes::c_char,
        newname: *const crate::ctypes::c_char,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoSync(
        device: *const crate::ctypes::c_char,
        unk: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoSyncByFd(fd: SceUID) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceIoCancel(fd: SceUID) -> crate::ctypes::c_int;
}
