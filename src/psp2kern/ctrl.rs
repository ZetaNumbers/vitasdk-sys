/* automatically generated by rust-bindgen 0.58.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;

pub mod SceCtrlErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_ERROR_INVALID_ARG: Type = 2150891521;
    pub const SCE_CTRL_ERROR_PRIV_REQUIRED: Type = 2150891522;
    pub const SCE_CTRL_ERROR_FATAL: Type = 2150891775;
}
pub mod SceCtrlButtons {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_SELECT: Type = 1;
    pub const SCE_CTRL_L3: Type = 2;
    pub const SCE_CTRL_R3: Type = 4;
    pub const SCE_CTRL_START: Type = 8;
    pub const SCE_CTRL_UP: Type = 16;
    pub const SCE_CTRL_RIGHT: Type = 32;
    pub const SCE_CTRL_DOWN: Type = 64;
    pub const SCE_CTRL_LEFT: Type = 128;
    pub const SCE_CTRL_LTRIGGER: Type = 256;
    pub const SCE_CTRL_RTRIGGER: Type = 512;
    pub const SCE_CTRL_L1: Type = 1024;
    pub const SCE_CTRL_R1: Type = 2048;
    pub const SCE_CTRL_TRIANGLE: Type = 4096;
    pub const SCE_CTRL_CIRCLE: Type = 8192;
    pub const SCE_CTRL_CROSS: Type = 16384;
    pub const SCE_CTRL_SQUARE: Type = 32768;
    pub const SCE_CTRL_INTERCEPTED: Type = 65536;
    pub const SCE_CTRL_PSBUTTON: Type = 65536;
    pub const SCE_CTRL_HEADPHONE: Type = 524288;
    pub const SCE_CTRL_VOLUP: Type = 1048576;
    pub const SCE_CTRL_VOLDOWN: Type = 2097152;
    pub const SCE_CTRL_POWER: Type = 1073741824;
}
pub mod SceCtrlExternalInputMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_TYPE_UNPAIRED: Type = 0;
    pub const SCE_CTRL_TYPE_PHY: Type = 1;
    pub const SCE_CTRL_TYPE_VIRT: Type = 2;
    pub const SCE_CTRL_TYPE_DS3: Type = 4;
    pub const SCE_CTRL_TYPE_DS4: Type = 8;
}
pub mod SceCtrlPadInputMode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_CTRL_MODE_DIGITAL: Type = 0;
    pub const SCE_CTRL_MODE_ANALOG: Type = 1;
    pub const SCE_CTRL_MODE_ANALOG_WIDE: Type = 2;
}
#[repr(C)]
pub struct SceCtrlData {
    pub timeStamp: u64,
    pub buttons: crate::ctypes::c_uint,
    pub lx: crate::ctypes::c_uchar,
    pub ly: crate::ctypes::c_uchar,
    pub rx: crate::ctypes::c_uchar,
    pub ry: crate::ctypes::c_uchar,
    pub reserved0: [u8; 4usize],
    pub lt: crate::ctypes::c_uchar,
    pub rt: crate::ctypes::c_uchar,
    pub reserved1: [u8; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlRapidFireRule {
    pub Mask: crate::ctypes::c_uint,
    pub Trigger: crate::ctypes::c_uint,
    pub Target: crate::ctypes::c_uint,
    pub Delay: crate::ctypes::c_uint,
    pub Make: crate::ctypes::c_uint,
    pub Break: crate::ctypes::c_uint,
}
#[repr(C)]
pub struct SceCtrlActuator {
    pub small: crate::ctypes::c_uchar,
    pub large: crate::ctypes::c_uchar,
    pub unk: [u8; 6usize],
}
#[repr(C)]
pub struct SceCtrlPortInfo {
    pub port: [u8; 5usize],
    pub unk: [u8; 11usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceCtrlVirtualControllerDriver {
    pub readButtons: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            pad_data: *mut SceCtrlData,
            count: crate::ctypes::c_int,
        ) -> crate::ctypes::c_int,
    >,
    pub setActuator: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            pState: *const SceCtrlActuator,
        ) -> crate::ctypes::c_int,
    >,
    pub getBatteryInfo: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            batt: *mut SceUInt8,
        ) -> crate::ctypes::c_int,
    >,
    pub disconnect: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub setTurnOffInterval: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub getActiveControllerPort:
        ::core::option::Option<unsafe extern "C" fn() -> crate::ctypes::c_int>,
    pub changePortAssign: ::core::option::Option<
        unsafe extern "C" fn(
            port1: crate::ctypes::c_int,
            port2: crate::ctypes::c_int,
        ) -> crate::ctypes::c_int,
    >,
    pub unk0: ::core::option::Option<unsafe extern "C" fn() -> crate::ctypes::c_int>,
    pub getControllerPortInfo: ::core::option::Option<
        unsafe extern "C" fn(info: *mut SceCtrlPortInfo) -> crate::ctypes::c_int,
    >,
    pub setLightBar: ::core::option::Option<
        unsafe extern "C" fn(
            port: crate::ctypes::c_int,
            r: SceUInt8,
            g: SceUInt8,
            b: SceUInt8,
        ) -> crate::ctypes::c_int,
    >,
    pub resetLightBar: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub unk1: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub singleControllerMode: ::core::option::Option<
        unsafe extern "C" fn(port: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
}
extern "C" {
    pub fn ksceCtrlSetSamplingMode(mode: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetSamplingMode(pMode: *mut crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlPeekBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlPeekBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlReadBufferPositive(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlReadBufferNegative(
        port: crate::ctypes::c_int,
        pad_data: *mut SceCtrlData,
        count: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
        pRule: *const SceCtrlRapidFireRule,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlClearRapidFire(
        port: crate::ctypes::c_int,
        idx: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetControllerPortInfo(info: *mut SceCtrlPortInfo) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetButtonIntercept(intercept: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetButtonIntercept(intercept: *mut crate::ctypes::c_int)
        -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetButtonEmulation(
        port: crate::ctypes::c_uint,
        slot: crate::ctypes::c_uchar,
        userButtons: crate::ctypes::c_uint,
        kernelButtons: crate::ctypes::c_uint,
        uiMake: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlSetAnalogEmulation(
        port: crate::ctypes::c_uint,
        slot: crate::ctypes::c_uchar,
        user_lX: crate::ctypes::c_uchar,
        user_lY: crate::ctypes::c_uchar,
        user_rX: crate::ctypes::c_uchar,
        user_rY: crate::ctypes::c_uchar,
        kernel_lX: crate::ctypes::c_uchar,
        kernel_lY: crate::ctypes::c_uchar,
        kernel_rX: crate::ctypes::c_uchar,
        kernel_rY: crate::ctypes::c_uchar,
        uiMake: crate::ctypes::c_uint,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlRegisterVirtualControllerDriver(
        driver: *mut SceCtrlVirtualControllerDriver,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlUpdateMaskForNonShell(
        clear_mask: crate::ctypes::c_int,
        set_mask: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlUpdateMaskForAll(
        clear_mask: crate::ctypes::c_int,
        set_mask: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetMaskForNonShell(mask: *mut u32) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceCtrlGetMaskForAll(mask: *mut u32) -> crate::ctypes::c_int;
}
