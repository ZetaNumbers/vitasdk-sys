/* automatically generated by rust-bindgen 0.58.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2kern::kernel::threadmgr::*;

pub mod SceUsbdErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_USBD_ERROR_IO: Type = 2149842945;
    pub const SCE_USBD_ERROR_INVALID_ARG: Type = 2149842946;
    pub const SCE_USBD_ERROR_ACCESS: Type = 2149842947;
    pub const SCE_USBD_ERROR_NO_DEVICE: Type = 2149842948;
    pub const SCE_USBD_ERROR_NOT_FOUND: Type = 2149842949;
    pub const SCE_USBD_ERROR_BUSY: Type = 2149842950;
    pub const SCE_USBD_ERROR_TIMEOUT: Type = 2149842951;
    pub const SCE_USBD_ERROR_OVERFLOW: Type = 2149842952;
    pub const SCE_USBD_ERROR_PIPE: Type = 2149842953;
    pub const SCE_USBD_ERROR_INTERRUPTED: Type = 2149842954;
    pub const SCE_USBD_ERROR_NO_MEM: Type = 2149842955;
    pub const SCE_USBD_ERROR_NOT_SUPPORTED: Type = 2149842956;
    pub const SCE_USBD_ERROR_FATAL: Type = 2149843199;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdDeviceDescriptor {
    pub bLength: crate::ctypes::c_uchar,
    pub bDescriptorType: crate::ctypes::c_uchar,
    pub bcdUSB: crate::ctypes::c_ushort,
    pub bDeviceClass: crate::ctypes::c_uchar,
    pub bDeviceSubClass: crate::ctypes::c_uchar,
    pub bDeviceProtocol: crate::ctypes::c_uchar,
    pub bMaxPacketSize0: crate::ctypes::c_uchar,
    pub idVendor: crate::ctypes::c_ushort,
    pub idProduct: crate::ctypes::c_ushort,
    pub bcdDevice: crate::ctypes::c_ushort,
    pub iManufacturer: crate::ctypes::c_uchar,
    pub iProduct: crate::ctypes::c_uchar,
    pub iSerialNumber: crate::ctypes::c_uchar,
    pub bNumConfigurations: crate::ctypes::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdEndpointDescriptor {
    pub bLength: crate::ctypes::c_uchar,
    pub bDescriptorType: crate::ctypes::c_uchar,
    pub bEndpointAddress: crate::ctypes::c_uchar,
    pub bmAttributes: crate::ctypes::c_uchar,
    pub wMaxPacketSize: crate::ctypes::c_ushort,
    pub bInterval: crate::ctypes::c_uchar,
    pub extra: *mut crate::ctypes::c_uchar,
    pub extraLength: crate::ctypes::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdDeviceAddress {
    pub unk0: crate::ctypes::c_uint,
    pub unk1: crate::ctypes::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdDriver {
    pub name: *const crate::ctypes::c_char,
    pub probe: ::core::option::Option<
        unsafe extern "C" fn(device_id: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub attach: ::core::option::Option<
        unsafe extern "C" fn(device_id: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
    pub detach: ::core::option::Option<
        unsafe extern "C" fn(device_id: crate::ctypes::c_int) -> crate::ctypes::c_int,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceUsbdControlTransferRequest {
    pub bmRequestType: crate::ctypes::c_uchar,
    pub bRequest: crate::ctypes::c_uchar,
    pub wValue: crate::ctypes::c_ushort,
    pub wIndex: crate::ctypes::c_ushort,
    pub wLength: crate::ctypes::c_ushort,
}
extern "C" {
    pub fn ksceUsbdRegisterDriver(driver: *const SceUsbdDriver) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceUsbdRegisterCompositeLdd(driver: *const SceUsbdDriver) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceUsbdUnregisterDriver(driver: *const SceUsbdDriver) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceUsbdGetDescriptor(
        device_id: crate::ctypes::c_int,
        prevDescriptor: *mut crate::ctypes::c_void,
        bDescriptorType: crate::ctypes::c_uchar,
    ) -> *mut crate::ctypes::c_void;
}
extern "C" {
    pub fn ksceUsbdOpenEndpoint(
        device_id: crate::ctypes::c_int,
        endpoint: *mut SceUsbdEndpointDescriptor,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceUsbdCloseEndpoint(endpoint_id: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceUsbdControlTransfer(
        endpoint_id: crate::ctypes::c_int,
        req: *const SceUsbdControlTransferRequest,
        buffer: *mut crate::ctypes::c_uchar,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: crate::ctypes::c_int,
                arg2: crate::ctypes::c_int,
                arg3: crate::ctypes::c_int,
            ) -> crate::ctypes::c_int,
        >,
        user_data: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceUsbdInterruptTransfer(
        endpoint_id: crate::ctypes::c_int,
        buffer: *mut crate::ctypes::c_uchar,
        length: crate::ctypes::c_uint,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: crate::ctypes::c_int,
                arg2: crate::ctypes::c_int,
                arg3: crate::ctypes::c_int,
            ) -> crate::ctypes::c_int,
        >,
        user_data: *mut crate::ctypes::c_void,
    ) -> crate::ctypes::c_int;
}
