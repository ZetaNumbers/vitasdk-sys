/* automatically generated by rust-bindgen 0.65.1 */

#[allow(unused_imports)]
use crate::psp2::kernel::threadmgr::*;
#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2common::types::*;

pub type SceKernelClock = SceUInt64;
pub type SceKernelTime = SceUInt32;
pub mod SceKernelProcessPrioritySystem {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_HIGH: Type = 32;
    pub const SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_DEFAULT: Type = 96;
    pub const SCE_KERNEL_PROCESS_PRIORITY_SYSTEM_LOW: Type = 159;
}
pub mod SceKernelProcessPriorityUser {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_PROCESS_PRIORITY_USER_HIGH: Type = 64;
    pub const SCE_KERNEL_PROCESS_PRIORITY_USER_DEFAULT: Type = 96;
    pub const SCE_KERNEL_PROCESS_PRIORITY_USER_LOW: Type = 127;
}
pub mod SceKernelPowerTickType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_KERNEL_POWER_TICK_DEFAULT: Type = 0;
    pub const SCE_KERNEL_POWER_TICK_DISABLE_AUTO_SUSPEND: Type = 1;
    pub const SCE_KERNEL_POWER_TICK_DISABLE_OLED_OFF: Type = 4;
    pub const SCE_KERNEL_POWER_TICK_DISABLE_OLED_DIMMING: Type = 6;
}
extern "C" {
    pub fn sceKernelExitProcess(res: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelPowerTick(type_: SceKernelPowerTickType::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelPowerLock(type_: SceKernelPowerTickType::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelPowerUnlock(type_: SceKernelPowerTickType::Type) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetProcessTime(pSysClock: *mut SceKernelSysClock) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceKernelGetProcessTimeLow() -> SceUInt32;
}
extern "C" {
    pub fn sceKernelGetProcessTimeWide() -> SceUInt64;
}
extern "C" {
    pub fn sceKernelGetCurrentProcess() -> SceUID;
}
extern "C" {
    pub fn sceKernelGetRemoteProcessTime(
        processId: SceUID,
        pClock: *mut SceKernelSysClock,
    ) -> SceInt32;
}
extern "C" {
    pub fn sceKernelGetStderr() -> SceUID;
}
extern "C" {
    pub fn sceKernelGetStdin() -> SceUID;
}
extern "C" {
    pub fn sceKernelGetStdout() -> SceUID;
}
extern "C" {
    pub fn sceKernelGetProcessParam() -> *const crate::ctypes::c_void;
}
extern "C" {
    pub fn sceKernelLibcClock() -> SceKernelClock;
}
extern "C" {
    pub fn sceKernelLibcTime(tloc: *mut SceKernelTime) -> SceKernelTime;
}
#[repr(C)]
pub struct SceKernelTimeval {
    pub sec: SceInt32,
    pub usec: SceInt32,
}
#[repr(C)]
pub struct SceKernelTimezone {
    pub value: SceUInt64,
}
extern "C" {
    pub fn sceKernelLibcGettimeofday(
        tv: *mut SceKernelTimeval,
        tz: *mut SceKernelTimezone,
    ) -> crate::ctypes::c_int;
}
