/* automatically generated by rust-bindgen 0.58.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;
#[allow(unused_imports)]
use crate::psp2kern::types::*;

extern "C" {
    pub fn ksceKernelCpuDcacheWritebackRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuGetCpuId() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuDisableInterrupts() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuEnableInterrupts(flags: crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuDcacheInvalidateRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuDcacheWritebackInvalidateRange(
        ptr: *const crate::ctypes::c_void,
        len: SceSize,
    );
}
extern "C" {
    pub fn ksceKernelCpuDcacheInvalidateAll();
}
extern "C" {
    pub fn ksceKernelCpuDcacheWritebackAll();
}
extern "C" {
    pub fn ksceKernelCpuDcacheWritebackInvalidateAll();
}
extern "C" {
    pub fn ksceKernelCpuDcacheAndL2WritebackRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuDcacheAndL2InvalidateRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuDcacheAndL2WritebackInvalidateRange(
        ptr: *const crate::ctypes::c_void,
        len: SceSize,
    );
}
extern "C" {
    pub fn ksceKernelCpuIcacheInvalidateRange(ptr: *const crate::ctypes::c_void, len: SceSize);
}
extern "C" {
    pub fn ksceKernelCpuIcacheInvalidateAll() -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuIcacheAndL2WritebackInvalidateRange(
        ptr: *const crate::ctypes::c_void,
        len: SceSize,
    );
}
extern "C" {
    pub fn ksceKernelCpuSuspendIntr(addr: *mut crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuResumeIntr(
        addr: *mut crate::ctypes::c_int,
        prev_state: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuSpinLockIrqSave(addr: *mut crate::ctypes::c_int) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn ksceKernelCpuSpinLockIrqRestore(
        addr: *mut crate::ctypes::c_int,
        flags: crate::ctypes::c_int,
    ) -> crate::ctypes::c_int;
}
