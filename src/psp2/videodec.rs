/* automatically generated by rust-bindgen 0.58.1 */

#[allow(unused_imports)]
use crate::psp2::types::*;

#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub mod SceVideodecErrorCode {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_VIDEODEC_ERROR_INVALID_TYPE: Type = 2153908225;
    pub const SCE_VIDEODEC_ERROR_INVALID_PARAM: Type = 2153908226;
    pub const SCE_VIDEODEC_ERROR_OUT_OF_MEMORY: Type = 2153908227;
    pub const SCE_VIDEODEC_ERROR_INVALID_STATE: Type = 2153908228;
    pub const SCE_VIDEODEC_ERROR_UNSUPPORT_IMAGE_SIZE: Type = 2153908229;
    pub const SCE_VIDEODEC_ERROR_INVALID_COLOR_FORMAT: Type = 2153908230;
    pub const SCE_VIDEODEC_ERROR_NOT_PHY_CONTINUOUS_MEMORY: Type = 2153908231;
    pub const SCE_VIDEODEC_ERROR_ALREADY_USED: Type = 2153908232;
    pub const SCE_VIDEODEC_ERROR_INVALID_POINTER: Type = 2153908233;
    pub const SCE_VIDEODEC_ERROR_ES_BUFFER_FULL: Type = 2153908234;
    pub const SCE_VIDEODEC_ERROR_INITIALIZE: Type = 2153908235;
    pub const SCE_VIDEODEC_ERROR_NOT_INITIALIZE: Type = 2153908236;
    pub const SCE_VIDEODEC_ERROR_INVALID_STREAM: Type = 2153908237;
    pub const SCE_VIDEODEC_ERROR_INVALID_ARGUMENT_SIZE: Type = 2153908238;
}
pub mod SceVideodecType {
    pub type Type = crate::ctypes::c_uint;
    pub const SCE_VIDEODEC_TYPE_HW_AVCDEC: Type = 4097;
}
#[repr(C)]
pub struct SceVideodecQueryInitInfoHwAvcdec {
    pub size: u32,
    pub horizontal: u32,
    pub vertical: u32,
    pub numOfRefFrames: u32,
    pub numOfStreams: u32,
}
#[repr(C)]
pub struct SceVideodecQueryInitInfo {
    pub reserved: __BindgenUnionField<[u8; 32usize]>,
    pub hwAvc: __BindgenUnionField<SceVideodecQueryInitInfoHwAvcdec>,
    pub bindgen_union_field: [u32; 8usize],
}
#[repr(C)]
pub struct SceVideodecTimeStamp {
    pub upper: u32,
    pub lower: u32,
}
extern "C" {
    pub fn sceVideodecInitLibrary(
        codec: SceVideodecType::Type,
        initInfo: *const SceVideodecQueryInitInfoHwAvcdec,
    ) -> crate::ctypes::c_int;
}
extern "C" {
    pub fn sceVideodecTermLibrary(codec: SceVideodecType::Type) -> crate::ctypes::c_int;
}
